@{
	string naviNodeID = Model.AncestorOrSelf(1).TopNavigation;
	if(!string.IsNullOrEmpty(naviNodeID))
	{
		@ListNaviNodes(Model.NodeById(naviNodeID))
	}
 }

@helper ListNaviNodes(dynamic startNode)
{
	@*<p>hello</p>
		<p>@GetUrlWithDomainPrefix(startNode.Url)</p>*@
    Response.ContentType = "text/xml";
    const int maxLevelForSiteMap = 100;
    
    
    foreach (var node in startNode.Children)
    {     
		var linkedNode = Model.NodeById(node.hyperlink);
            <url>
				<name>@node.Name</name>
                <loc>@GetUrlWithDomainPrefix(linkedNode.Url)</loc>
                <lastmod>@(string.Format("{0:s}+00:00", linkedNode.UpdateDate))</lastmod>
                @if (linkedNode.SearchEngineSitemapChangeFreq.ToString() != "")
                {
                    <changefreq>@linkedNode.SearchEngineSitemapChangeFreq</changefreq>
                }
                @if (linkedNode.SearchEngineSitemapPriority.ToString() != "")
                {
                    <priority>@linkedNode.SearchEngineSitemapPriority</priority>
                }
            </url>
            
		if (node.Level <= maxLevelForSiteMap && node.ChildrenAsList.Count() > 0)
        {
            @ListNaviNodes(node)
        } 
        else if (linkedNode.Level <= maxLevelForSiteMap && linkedNode.ChildrenAsList.Count() > 0)
        {
            @ListChildNodes(linkedNode)
        } 
    }
}

@helper ListChildNodes(dynamic startNode)
{
    Response.ContentType = "text/xml";
    const int maxLevelForSiteMap = 100;
    
    
    foreach (var node in startNode.Children
        @*.Where("HasAccess")
        .Where("!IsProtected")
        .Where("umbracoNaviHide == false") -- is this needed*@
      )
    {     
        if(node.template > 0) {
            <url>
                <loc>@GetUrlWithDomainPrefix(node.Url)</loc>
                <lastmod>@(string.Format("{0:s}+00:00", node.UpdateDate))</lastmod>
                @if (node.SearchEngineSitemapChangeFreq.ToString() != "")
                {
                    <changefreq>@node.SearchEngineSitemapChangeFreq</changefreq>
                }
                @if (node.SearchEngineSitemapPriority.ToString() != "")
                {
                    <priority>@node.SearchEngineSitemapPriority</priority>
                }
            </url>
        }
            
        if (node.Level <= maxLevelForSiteMap && node.ChildrenAsList.Count() > 0)
        {
            @ListChildNodes(node)
        } 
    }
}

@functions {
    private static string GetUrlWithDomainPrefix(string url) {
        if (url.StartsWith("/"))
          url = url.Substring(1);
                                                              
        var domainPrefix = string.Format("http://{0}/", HttpContext.Current.Request.ServerVariables["HTTP_HOST"]);
                                                              
        if (url.StartsWith(domainPrefix))
            return url;
        else
            return domainPrefix + url;
    }
}